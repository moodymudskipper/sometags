% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/03_withr_wrappers.R
\name{withr_wrappers}
\alias{withr_wrappers}
\alias{setting_bmp}
\alias{setting_cairo_pdf}
\alias{setting_cairo_ps}
\alias{setting_collate}
\alias{setting_connection}
\alias{setting_db_connection}
\alias{setting_dir}
\alias{setting_environment}
\alias{setting_envvar}
\alias{setting_file}
\alias{setting_jpeg}
\alias{setting_libpaths}
\alias{setting_locale}
\alias{setting_makevars}
\alias{setting_message_sink}
\alias{setting_namespace}
\alias{setting_options}
\alias{setting_output_sink}
\alias{setting_package}
\alias{setting_par}
\alias{setting_path}
\alias{setting_pdf}
\alias{setting_png}
\alias{setting_postscript}
\alias{setting_preserve_seed}
\alias{setting_seed}
\alias{setting_svg}
\alias{setting_temp_libpaths}
\alias{setting_tempfile}
\alias{setting_tiff}
\alias{setting_xfig}
\title{tag counterparts to withr functions}
\usage{
setting_bmp(.new, ..dots = NULL)

setting_cairo_pdf(.new, ..dots = NULL)

setting_cairo_ps(.new, ..dots = NULL)

setting_collate(.new)

setting_connection(.con)

setting_db_connection(.con)

setting_dir(.new)

setting_environment(.env, .pos = 2L, .name = format(.env),
  .warn.conflicts = FALSE)

setting_envvar(.new, .action = "replace")

setting_file(.file)

setting_jpeg(.new, ..dots = NULL)

setting_libpaths(.new, .action = "replace")

setting_locale(.new)

setting_makevars(.new, .path = file.path("~", ".R", "Makevars"),
  .assignment = c("=", ":=", "?=", "+="))

setting_message_sink(.new, .append = FALSE)

setting_namespace(.package, .warn.conflicts = FALSE)

setting_options(.new)

setting_output_sink(.new, .append = FALSE, .split = FALSE)

setting_package(.package, .pos = 2, .lib.loc = NULL,
  .character.only = TRUE, .logical.return = FALSE,
  .warn.conflicts = FALSE, .quietly = TRUE,
  .verbose = getOption("verbose"))

setting_par(.new, .no.readonly = FALSE)

setting_path(.new, .action = "prefix")

setting_pdf(.new, .width, .height, .onefile, .family, .title, .fonts,
  .version, .paper, .encoding, .bg, .fg, .pointsize, .pagecentre,
  .colormodel, .useDingbats, .useKerning, .fillOddEven, .compress)

setting_png(.new, ..dots = NULL)

setting_postscript(.new, .onefile, .family, .title, .fonts, .encoding, .bg,
  .fg, .width, .height, .horizontal, .pointsize, .paper, .pagecentre,
  .print.it, .command, .colormodel, .useKerning, .fillOddEven)

setting_preserve_seed(.code)

setting_seed(.seed)

setting_svg(.new, .width = 7, .height = 7, .pointsize = 12,
  .onefile = FALSE, .family = "sans", .bg = "white",
  .antialias = c("default", "none", "gray", "subpixel"))

setting_temp_libpaths(.code)

setting_tempfile(.new, .envir = parent.frame(), .pattern = "file",
  .tmpdir = tempdir(), .fileext = "")

setting_tiff(.new, ..dots = NULL)

setting_xfig(.new, .onefile = FALSE, .encoding = "none",
  .paper = "default", .horizontal = TRUE, .width = 0, .height = 0,
  .family = "Helvetica", .pointsize = 12, .bg = "transparent",
  .fg = "black", .pagecentre = TRUE, .defaultfont = FALSE,
  .textspecial = FALSE)
}
\arguments{
\item{.new, ..dots, .con, .env, .pos, .name, .warn.conflicts, .action, .file, .path, .assignment, .append, .package, .split, .lib.loc, .character.only, .logical.return, .quietly, .verbose, .no.readonly, .width, .height, .onefile, .family, .title, .fonts, .version, .paper, .encoding, .bg, .fg, .pointsize, .pagecentre, .colormodel, .useDingbats, .useKerning, .fillOddEven, .compress, .horizontal, .print.it, .command, .code, .seed, .antialias, .envir, .pattern, .tmpdir, .fileext, .defaultfont, .textspecial}{forwarded to the relevant \emph{withr} function argument}
}
\description{
These functions are wrapped around functions from the \emph{withr} package.
While in \emph{withr} function names are prefixed with \code{"with_"} in this package
they are prefixed with \code{"setting_"}.
}
\details{
\emph{withr} makes working with global state in R safer and less error prone.
With \emph{withr} the changes are made during the evaluation of an expression,
with the \code{tag} counterparts they are made during a function call.

Note that \code{withr::with_options} and \code{rlang::with_options} are different
functions, and \code{tags::setting_options} is a wrapper around \code{withr::with_options}.
}
\examples{
# examples adapted from withr's vignette

\dontrun{
## Graphics devices
path <- "test.png"
with_png(path, width = 400, height = 300, {
  plot(mtcars$hp, mtcars$mpg)
})
setting_png(path, list(width = 400, height = 300))$plot(mtcars$hp, mtcars$mpg)

## Connections

with_connection(list(con = file("temp", "w")), {
  writeLines(c("foo", "bar"), con)
})
unlink("temp")

setting_connection(list(con = file("temp", "w")))$writeLines(c("foo", "bar"), con)
unlink("temp")

## Packages

with_package("lattice", {
xyplot(y ~ x, data.frame(x = -2:2, y = dnorm(-2:2)))
})

# setting_package cannot be used directly on package function, to do this use `::`
fun <- function(x, y){ xyplot(y ~ x, data.frame(x = x, y = y))}
setting_package("lattice")$fun(x = -2:2, y = dnorm(-2:2))

## Tempfiles

with_tempfile("file1", {
  print(file1)
  writeLines("foo", file1)
  readLines(file1)
})

fun <- function(file0) {
  print(file0)
  writeLines("foo", file0)
  readLines(file0)
}
setting_tempfile("file1")$fun(file1)
setting_tempfile("temp")$fun(temp)
}
}
