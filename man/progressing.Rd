% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/07_progressing.R
\name{progressing}
\alias{progressing}
\title{progressing tag to use progress bar with functionals}
\usage{
progressing(.format = "[:bar] :percent", .width = options("width")[[1]]
  - 2, .complete = "=", .incomplete = "-", .current = ">",
  .callback = invisible, .clear = TRUE, .show_after = 0.2,
  .force = FALSE, .message = NULL, .tokens = alist(),
  .FUN_arg = NULL)
}
\arguments{
\item{.format}{The format of the progress bar. see \code{?progress::progress_bar}}

\item{.width}{Width of the progress bar.}

\item{.complete}{Completion character.}

\item{.incomplete}{Incomplete character.}

\item{.current}{Current character.}

\item{.callback}{Callback function to call when the progress bar finishes.
The progress bar object itself is passed to it as the single parameter.}

\item{.clear}{Whether to clear the progress bar on completion.}

\item{.show_after}{Amount of time in seconds, after which the progress bar is
shown on the screen. For very short processes, it is probably not worth
showing it at all.}

\item{.force}{Whether to force showing the progress bar, even if the given (or default) stream does not seem to support it.}

\item{.message}{A message to display on top of the bar}

\item{.tokens}{A list of unevaluated expressions, using \code{alist}, to be passed
passed to the \code{tick} method of the progress bar}

\item{.FUN_arg}{name or position of function arg, by default looks for the
first argument that is either \code{FUN}, \code{.f} or \code{f}}
}
\description{
progressing tag to use progress bar with functionals
}
\examples{
\dontrun{
library(purrr)
progressing$map(1:3, ~{Sys.sleep(1);.x*2})
}
x <- progressing$lapply(1:10000, force)
progressing(.format = "[:bar] :eta")$lapply(1:5, function(x) {Sys.sleep(1);x*2})
}
